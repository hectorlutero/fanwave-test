import type { Config, ThemeConfig } from 'tailwindcss/types/config.js';
import { Extension, type StrictPublicExtensionApi } from '@roots/bud-framework/extension';
import resolveConfig from 'tailwindcss/resolveConfig.js';
type Options = {
    config: Config;
    configPath: string;
    resolvedConfig?: ReturnType<typeof resolveConfig<Config>>;
};
type BudTailwindOptionsPublicInterface = StrictPublicExtensionApi<BudTailwindOptionsApi, Options> & {
    extendTheme(theme: Partial<ThemeConfig>): BudTailwindOptionsPublicInterface;
    extendTheme<K extends keyof ThemeConfig & string>(key: `${K}`, theme: ThemeConfig[K]): BudTailwindOptionsPublicInterface;
    generateImports(imports: Array<`${keyof ThemeConfig & string}`> | boolean): BudTailwindOptionsPublicInterface;
    getContent(): Config[`content`];
    getPlugins(): Config[`plugins`];
    getTheme(): ThemeConfig;
    getTheme<K extends keyof ThemeConfig & string>(key?: `${K}`): K extends ThemeConfig ? ThemeConfig[K] : ThemeConfig;
    setContent(content: Config[`content`]): BudTailwindOptionsPublicInterface;
    setPlugins(plugins: Config[`plugins`]): BudTailwindOptionsPublicInterface;
    setTheme(theme: ThemeConfig): BudTailwindOptionsPublicInterface;
    setTheme<K extends keyof ThemeConfig & string>(key: K, theme: ThemeConfig[K]): BudTailwindOptionsPublicInterface;
};
/**
 * TailwindCSS configuration
 */
declare class BudTailwindOptionsApi extends Extension<Options> implements BudTailwindOptionsPublicInterface {
    /**
     * Tailwind config
     */
    config: BudTailwindOptionsPublicInterface[`config`];
    /**
     * Tailwind config path
     */
    configPath: BudTailwindOptionsPublicInterface[`configPath`];
    getConfig: BudTailwindOptionsPublicInterface[`getConfig`];
    getConfigPath: BudTailwindOptionsPublicInterface[`getConfigPath`];
    getResolvedConfig: BudTailwindOptionsPublicInterface[`getResolvedConfig`];
    /**
     * Tailwind config (resolved)
     */
    resolvedConfig: BudTailwindOptionsPublicInterface[`resolvedConfig`];
    setConfig: BudTailwindOptionsPublicInterface[`setConfig`];
    setConfigPath: BudTailwindOptionsPublicInterface[`setConfigPath`];
    setResolvedConfig: BudTailwindOptionsPublicInterface[`setResolvedConfig`];
    extendTheme<K extends `${keyof ThemeConfig & string}` | undefined, V extends Partial<ThemeConfig>, VK extends Partial<ThemeConfig>[K]>(...params: [K, VK] | [V]): this;
    /**
     * Generate import mapping
     *
     * @example
     * Generate colors import:
     *
     * ```js
     * bud.tailwind.generateImports([`colors`])
     * ```
     *
     * @example
     * Generate all imports:
     *
     * ```js
     * bud.tailwind.generateImports(true)
     * ```
     */
    generateImports(imports?: Array<`${keyof ThemeConfig & string}`> | boolean): this;
    getContent(): import("tailwindcss/types/config.js").ContentConfig;
    getPlugins(): (import("tailwindcss/types/config.js").PluginCreator | {
        handler: import("tailwindcss/types/config.js").PluginCreator;
        config?: Partial<Config>;
    } | {
        (options: any): {
            handler: import("tailwindcss/types/config.js").PluginCreator;
            config?: Partial<Config>;
        };
        __isOptionsFunction: true;
    })[];
    getTheme<K extends keyof ThemeConfig & string>(key?: K): Partial<ThemeConfig & {
        extend: Partial<ThemeConfig>;
    }> | Partial<ThemeConfig & {
        extend: Partial<ThemeConfig>;
    }>[K];
    resolveConfig(): Omit<Config, "theme"> & {
        theme: {
            [x: string]: any;
            screens?: import("tailwindcss/types/config.js").ScreensConfig;
            supports?: Record<string, string>;
            data?: Record<string, string>;
            colors?: import("tailwindcss/types/config.js").RecursiveKeyValuePair<string, string>;
            spacing?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            container?: Partial<{
                screens: import("tailwindcss/types/config.js").ScreensConfig;
                center: boolean;
                padding: string | Record<string, string>;
            }>;
            inset?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            zIndex?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            order?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            gridColumn?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            gridColumnStart?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            gridColumnEnd?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            gridRow?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            gridRowStart?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            gridRowEnd?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            margin?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            aspectRatio?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            height?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            maxHeight?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            minHeight?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            width?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            maxWidth?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            minWidth?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            flex?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            flexShrink?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            flexGrow?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            flexBasis?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            borderSpacing?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            transformOrigin?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            translate?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            rotate?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            skew?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            scale?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            animation?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            keyframes?: import("tailwindcss/types/config.js").KeyValuePair<string, import("tailwindcss/types/config.js").KeyValuePair<string, import("tailwindcss/types/config.js").KeyValuePair<string, string>>>;
            cursor?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            scrollMargin?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            scrollPadding?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            listStyleType?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            columns?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            gridAutoColumns?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            gridAutoRows?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            gridTemplateColumns?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            gridTemplateRows?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            gap?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            space?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            divideWidth?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            divideColor?: import("tailwindcss/types/config.js").RecursiveKeyValuePair<string, string>;
            divideOpacity?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            borderRadius?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            borderWidth?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            borderColor?: import("tailwindcss/types/config.js").RecursiveKeyValuePair<string, string>;
            borderOpacity?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            backgroundColor?: import("tailwindcss/types/config.js").RecursiveKeyValuePair<string, string>;
            backgroundOpacity?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            backgroundImage?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            gradientColorStops?: import("tailwindcss/types/config.js").RecursiveKeyValuePair<string, string>;
            backgroundSize?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            backgroundPosition?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            fill?: import("tailwindcss/types/config.js").RecursiveKeyValuePair<string, string>;
            stroke?: import("tailwindcss/types/config.js").RecursiveKeyValuePair<string, string>;
            strokeWidth?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            objectPosition?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            padding?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            textIndent?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            fontFamily?: import("tailwindcss/types/config.js").KeyValuePair<string, string | string[] | [fontFamily: string | string[], configuration: Partial<{
                fontFeatureSettings: string;
                fontVariationSettings: string;
            }>]>;
            fontSize?: import("tailwindcss/types/config.js").KeyValuePair<string, string | [fontSize: string, lineHeight: string] | [fontSize: string, configuration: Partial<{
                lineHeight: string;
                letterSpacing: string;
                fontWeight: string | number;
            }>]>;
            fontWeight?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            lineHeight?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            letterSpacing?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            textColor?: import("tailwindcss/types/config.js").RecursiveKeyValuePair<string, string>;
            textOpacity?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            textDecorationColor?: import("tailwindcss/types/config.js").RecursiveKeyValuePair<string, string>;
            textDecorationThickness?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            textUnderlineOffset?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            placeholderColor?: import("tailwindcss/types/config.js").RecursiveKeyValuePair<string, string>;
            placeholderOpacity?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            caretColor?: import("tailwindcss/types/config.js").RecursiveKeyValuePair<string, string>;
            accentColor?: import("tailwindcss/types/config.js").RecursiveKeyValuePair<string, string>;
            opacity?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            boxShadow?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            boxShadowColor?: import("tailwindcss/types/config.js").RecursiveKeyValuePair<string, string>;
            outlineWidth?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            outlineOffset?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            outlineColor?: import("tailwindcss/types/config.js").RecursiveKeyValuePair<string, string>;
            ringWidth?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            ringColor?: import("tailwindcss/types/config.js").RecursiveKeyValuePair<string, string>;
            ringOpacity?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            ringOffsetWidth?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            ringOffsetColor?: import("tailwindcss/types/config.js").RecursiveKeyValuePair<string, string>;
            blur?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            brightness?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            contrast?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            dropShadow?: import("tailwindcss/types/config.js").KeyValuePair<string, string | string[]>;
            grayscale?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            hueRotate?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            invert?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            saturate?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            sepia?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            backdropBlur?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            backdropBrightness?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            backdropContrast?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            backdropGrayscale?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            backdropHueRotate?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            backdropInvert?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            backdropOpacity?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            backdropSaturate?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            backdropSepia?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            transitionProperty?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            transitionTimingFunction?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            transitionDelay?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            transitionDuration?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            willChange?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            content?: import("tailwindcss/types/config.js").KeyValuePair<string, string>;
            extend?: Partial<ThemeConfig>;
        };
    };
    /**
     * Resolve a tailwind config value
     */
    resolveThemeValue<K extends `${keyof ThemeConfig & string}`>(key: K, extendedOnly?: boolean): Config[K];
    setContent(content: Config[`content`]): this;
    setPlugins(plugins: Config[`plugins`]): this;
    setTheme<K extends `${keyof ThemeConfig & string}` | undefined, V extends ((theme: Partial<ThemeConfig>) => Partial<ThemeConfig>) | Partial<ThemeConfig>, VK extends ((theme: Partial<ThemeConfig>[K]) => Partial<ThemeConfig>[K]) | Partial<ThemeConfig>[K]>(...params: [K, VK] | [V]): this;
    /**
     * Source tailwind config module and path
     */
    sourceConfig(): Promise<void>;
}
export { BudTailwindOptionsApi, type BudTailwindOptionsPublicInterface, type Options, };
