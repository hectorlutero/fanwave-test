import { __decorate } from "tslib";
import { bind } from '@roots/bud-support/decorators/bind';
import { BudError } from '@roots/bud-support/errors';
import camelCase from '@roots/bud-support/lodash/camelCase';
import logger from '@roots/bud-support/logger';
import Container from '@roots/container';
/**
 * Service
 *
 * @remarks
 * The Service interface provides access to the Bud parent container.
 *
 * A Service interfaces with the Framework through a series of callbacks at different points in the build.
 */
class Base {
    _app;
    /**
     * Class constructor
     */
    constructor(_app) {
        this._app = _app;
    }
    /**
     * {@link Contract.app}
     * @readonly
     */
    get app() {
        return this._app();
    }
    /**
     * {@link Contract.catch}
     */
    catch(error) {
        if (typeof error === `string`) {
            throw BudError.normalize(error);
        }
        throw error;
    }
    /**
     * {@link Contract.done}
     */
    done() {
        return this.app;
    }
    /**
     * {@link Contract.logger}
     */
    get logger() {
        return logger.scope(this.app.label, camelCase(this.constructor.name));
    }
}
__decorate([
    bind
], Base.prototype, "catch", null);
/**
 * Service
 *
 * @remarks
 * The Service interface provides access to the {@link Bud} container.
 *
 * A Service interfaces with the Framework through a series of callbacks at different points in the build.
 */
class BaseContainer extends Container {
    _app;
    /**
     * Class constructor
     */
    constructor(_app) {
        super();
        this._app = _app;
    }
    /**
     * {@link Contract.app}
     * @readonly
     */
    get app() {
        return this._app();
    }
    /**
     * {@link Contract.catch}
     */
    catch(error) {
        if (typeof error === `string`) {
            throw BudError.normalize(error);
        }
        throw error;
    }
    /**
     * {@link Contract.done}
     */
    done() {
        return this.app;
    }
    /**
     * {@link Contract.logger}
     */
    get logger() {
        return logger.scope(this.app.label, camelCase(this.constructor.name));
    }
}
__decorate([
    bind
], BaseContainer.prototype, "catch", null);
export { Base, Base as Service, Base as default, BaseContainer, BaseContainer as ServiceContainer, };
