/// <reference types="node" resolution-mode="require"/>
import type { Bud } from '@roots/bud-framework';
import type { StatsCompilation, StatsError } from '@roots/bud-framework/config';
import type { Dashboard as BudDashboard } from '@roots/bud-framework/services';
import { Service } from '@roots/bud-framework/service';
/**
 * {@link BudDashboard} implementation
 */
export declare class Dashboard extends Service implements BudDashboard {
    /**
     * {@link BudDashboard.formatStatsErrors}
     */
    formatStatsErrors: (errors: StatsError[] | undefined) => StatsError[] | undefined;
    /**
     * {@link BudDashboard.instance}
     */
    instance?: BudDashboard[`instance`];
    /**
     * {@link BudDashboard.messages}
     */
    messages: BudDashboard[`messages`];
    /**
     * Restore console function
     *
     * @remarks
     * Returned from {@link patchConsole} call. Restores
     * the normal {@link console} behavior.
     */
    restore?: () => any;
    /**
     * {@link BudDashboard.stats}
     */
    stats?: StatsCompilation;
    /**
     * {@link BudDashboard.status}
     */
    status?: false | string;
    /**
     * {@link BudDashboard.stdout}
     */
    stderr: NodeJS.WriteStream & {
        fd: 2;
    };
    /**
     * {@link BudDashboard.stdin}
     */
    stdin: NodeJS.ReadStream & {
        fd: 0;
    };
    /**
     * {@link BudDashboard.stderr}
     */
    stdout: NodeJS.WriteStream & {
        fd: 1;
    };
    /**
     * Class constructor
     * @param app
     */
    constructor(app: () => Bud);
    /**
     * {@link BudDashboard.patched}
     */
    patched(): boolean;
    /**
     * {@link BudDashboard.render}
     */
    render(error?: Error): void;
    /**
     * {@link BudDashboard.renderString}
     */
    renderString(text: string): void;
    /**
     * {@link BudDashboard.updateStats}
     */
    updateStats(stats: StatsCompilation): BudDashboard;
    /**
     * {@link BudDashboard.updateStatus}
     */
    updateStatus(status: string): BudDashboard;
}
