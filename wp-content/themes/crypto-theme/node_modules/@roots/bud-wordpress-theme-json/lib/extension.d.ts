import type { Options } from '@roots/wordpress-theme-json-webpack-plugin';
import { Extension, type StrictPublicExtensionApi } from '@roots/bud-framework/extension';
import Container from '@roots/container';
import ThemeJsonWebpackPlugin from '@roots/wordpress-theme-json-webpack-plugin';
/**
 * Callback function used to configure wordpress `theme.json`
 */
interface Mutator {
    (json: Container<Partial<Options['settings']>>): Container<Partial<Options['settings']>>;
    (json: Partial<Options['settings']>): Partial<Options['settings']>;
}
type Api = StrictPublicExtensionApi<WordPressThemeJSON, Options & Record<string, unknown>> & {
    customTemplates: Options['customTemplates'];
    generated: Options['__generated__'];
    path: Options['path'];
    patterns: Options['patterns'];
    /**
     * ## bud.wpjson.settings
     *
     * Define `theme.json` settings using an options object or callback
     */
    settings: WordPressThemeJSON[`settings`];
    styles: Options['styles'];
    templateParts: Options['templateParts'];
    /**
     * ## bud.wpjson.useTailwindColors
     *
     * Source `theme.json` color values from `tailwind.config.js`
     *
     * @note
     * Requires {@link https://bud.js.org/extensions/bud-tailwindcss/ @roots/bud-tailwindcss} to be installed.
     */
    useTailwindColors: (value?: boolean, extendOnly?: boolean) => Api;
    /**
     * ## bud.wpjson.useTailwindFontFamily
     *
     * Source `theme.json` fontFamily values from `tailwind.config.js`
     *
     * @note
     * Requires {@link https://bud.js.org/extensions/bud-tailwindcss/ @roots/bud-tailwindcss} to be installed.
     */
    useTailwindFontFamily: (value?: boolean, extendOnly?: boolean) => Api;
    /**
     * ## bud.wpjson.useTailwindFontSize
     *
     * Source `theme.json` fontSize values from `tailwind.config.js`
     *
     * @note
     * Requires {@link https://bud.js.org/extensions/bud-tailwindcss/ @roots/bud-tailwindcss} to be installed.
     */
    useTailwindFontSize: (value?: boolean, extendOnly?: boolean) => Api;
    version: Options['version'];
};
/**
 * WordPress theme.json configuration
 *
 * @example
 * ```ts
 * bud.themeJson(theme =>
 *   theme.set('color', {})
 * )
 * ```
 */
declare class WordPressThemeJSON extends Extension<Options, ThemeJsonWebpackPlugin> implements Api {
    readonly customTemplates: Api['customTemplates'];
    getCustomTemplates: Api['getCustomTemplates'];
    getPath: Api['getPath'];
    getPatterns: Api['getPatterns'];
    getSettings: Api['getSettings'];
    getStyles: Api['getStyles'];
    getTemplateParts: Api['getTemplateParts'];
    getVersion: Api['getVersion'];
    readonly path: Api['path'];
    readonly patterns: Api['patterns'];
    setCustomTemplates: Api['setCustomTemplates'];
    setPath: Api['setPath'];
    setPatterns: Api['setPatterns'];
    setSettings: Api['setSettings'];
    setStyles: Api['setStyles'];
    setTemplateParts: Api['setTemplateParts'];
    setVersion: Api['setVersion'];
    readonly styles: Api['styles'];
    readonly templateParts: Api['templateParts'];
    readonly version: Api['version'];
    settings(input: boolean | Container<Partial<Options['settings']>> | Mutator | Partial<Options['settings']>, raw?: boolean): this;
}
export { type Api, WordPressThemeJSON };
