import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "@roots/bud-support/jsx-runtime";
import { exit } from 'node:process';
import { Error } from '@roots/bud-dashboard/components/error';
import Compilation from '@roots/bud-dashboard/views/compilation';
import Debug from '@roots/bud-dashboard/views/debug';
import Server from '@roots/bud-dashboard/views/server';
import { Box, Static, useApp, useInput, useState, useStdout, } from '@roots/bud-support/ink';
export const Application = ({ basedir, compact, compilations, debug, devUrl, displayAssets, displayEntrypoints, displayServerInfo, error, isolated = 0, mode, proxy, proxyUrl, publicDevUrl, publicProxyUrl, status, }) => {
    const { stdout } = useStdout();
    compilations = Array.isArray(compilations)
        ? compilations?.filter(compilation => compilation.hash) ?? []
        : [];
    if (mode === `production`) {
        return (_jsxs(Box, { flexDirection: "column", gap: 1, children: [error && _jsx(Error, { error: error }), _jsx(Static, { items: compilations, children: (compilation, id) => {
                        if (isolated > 0 && id + 1 !== isolated)
                            return null;
                        return (_jsx(RenderCompilation, { basedir: basedir, compact: compact, compilation: compilation, compilations: compilations, debug: debug, displayAssets: displayAssets, displayEntrypoints: displayEntrypoints, id: id, stdout: stdout }, `${compilation.name}-${compilation.hash}-${id}`));
                    } })] }));
    }
    return (_jsxs(_Fragment, { children: [error && _jsx(Error, { error: error }), compilations.map((compilation, id) => (_jsx(RenderCompilation, { basedir: basedir, compact: compact, compilation: compilation, compilations: compilations, debug: debug, displayAssets: displayAssets, displayEntrypoints: displayEntrypoints, id: id, stdout: stdout }, `${compilation.name}-${compilation.hash}-${id}`))), _jsx(Server, { devUrl: devUrl, displayServerInfo: displayServerInfo, mode: mode, proxy: proxy, proxyUrl: proxyUrl, publicDevUrl: publicDevUrl, publicProxyUrl: publicProxyUrl })] }));
};
export const RenderCompilation = ({ basedir, compact, compilation, compilations, debug, displayAssets, displayEntrypoints, id, stdout, }) => {
    return (_jsxs(Box, { flexDirection: "column", gap: 1, width: stdout.columns - 2, children: [_jsx(Compilation, { basedir: basedir, compact: compact, compilation: compilation, debug: debug, displayAssets: displayAssets, displayEntrypoints: displayEntrypoints, id: id + 1, total: compilations?.length }), _jsx(Debug, { compilation: compilation, debug: debug })] }));
};
export const TeletypeApplication = ({ children, close, ...props }) => {
    const app = useApp();
    const [displayServerInfo, setDisplayServerInfo] = useState(props.displayServerInfo);
    const [debug, setDisplayDebug] = useState(props.debug);
    const [displayEntrypoints, setDisplayEntrypoints] = useState(true);
    const [displayAssets, setDisplayAssets] = useState(props.displayAssets);
    const [closed, setClosed] = useState(false);
    const [compact, setCompact] = useState(props.compact);
    const [isolated, setIsolated] = useState(0);
    useInput((key, input) => {
        switch (key) {
            case `a`:
                setDisplayAssets(!displayAssets);
                break;
            case `e`:
                setDisplayEntrypoints(!displayEntrypoints);
                break;
            case `d`:
                setDisplayDebug(!debug);
                break;
            case `s`:
                setDisplayServerInfo(!displayServerInfo);
                break;
            case `c`:
                setCompact(!compact);
                break;
            case `0`:
                setIsolated(0);
                break;
            default:
                break;
        }
        new Array(9).fill(0).forEach((_, i) => {
            if (!props.compilations)
                return;
            key === `${i + 1}` &&
                isolated !== i + 1 &&
                setIsolated(Math.min(i + 1, props.compilations.length));
        });
        if (input.escape) {
            setClosed(true);
            if (close)
                close((error) => {
                    if (error)
                        app.exit(error);
                    else
                        app.exit();
                    exit(error ? 1 : 0);
                });
        }
    });
    return (_jsx(Application, { ...props, closed: closed, compact: compact, debug: debug, displayAssets: displayAssets, displayEntrypoints: displayEntrypoints, displayServerInfo: displayServerInfo, isolated: isolated }));
};
