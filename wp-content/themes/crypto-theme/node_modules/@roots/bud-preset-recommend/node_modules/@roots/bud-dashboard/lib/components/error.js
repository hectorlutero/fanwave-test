import { jsx as _jsx, jsxs as _jsxs } from "@roots/bud-support/jsx-runtime";
/* eslint-disable n/no-process-env */
import { BudError } from '@roots/bud-support/errors';
import figures from '@roots/bud-support/figures';
import { Box, Static, Text } from '@roots/bud-support/ink';
const basePath = process.env.PROJECT_CWD ?? process.env.INIT_CWD ?? process.cwd();
export const Error = ({ error }) => {
    let normalError;
    if (!error) {
        error = BudError.normalize(`Unknown error`);
    }
    normalError =
        error instanceof BudError ? error : BudError.normalize(error);
    return (_jsx(Static, { items: [0], children: (_, key) => (_jsxs(Box, { flexDirection: "column", paddingTop: 1, children: [_jsx(Text, { backgroundColor: "red", color: "white", children: ` ${normalError.name} ` }), _jsxs(Box, { flexDirection: "row", gap: 1, marginTop: 1, children: [_jsx(Text, { color: "red", children: figures.cross }), _jsx(Text, { children: normalError.message })] }), normalError.details &&
                    !normalError.details.startsWith(`resolve`) && (_jsx(Box, { marginTop: 1, children: _jsxs(Text, { children: [_jsxs(Text, { color: "blue", children: [figures.ellipsis, ` `, "Details", ` `] }), _jsx(Text, { children: normalError.details.replace(basePath, `.`) })] }) })), normalError.thrownBy && (_jsxs(Box, { flexDirection: "row", gap: 1, marginTop: 1, children: [_jsxs(Text, { color: "blue", children: [figures.ellipsis, ` `, "Thrown by", ` `] }), _jsx(Text, { children: normalError.thrownBy })] })), normalError.docs && (_jsx(Box, { marginTop: 1, children: _jsxs(Text, { children: [_jsxs(Text, { color: "blue", children: [figures.arrowRight, ` `, "Documentation", ` `] }), _jsx(Text, { children: normalError.docs.href })] }) })), normalError.issues && (_jsx(Box, { marginTop: 1, children: _jsxs(Text, { children: [_jsxs(Text, { color: "blue", children: [figures.arrowRight, ` `, "Issues"] }), ` `, _jsx(Text, { children: normalError.issues.href })] }) })), normalError.file && (_jsxs(Box, { marginTop: 1, children: [_jsxs(Text, { color: "blue", children: [figures.info, ` `, "See file", ` `] }), _jsx(Text, { children: normalError.file.path })] })), normalError.origin &&
                    !(normalError.origin instanceof BudError) &&
                    normalError.stack && (_jsxs(Box, { flexDirection: "column", marginTop: 1, children: [_jsxs(Text, { color: "blue", children: [figures.home, ` `, "Stack trace", ` `] }), _jsx(Box, { borderBottom: false, borderColor: "red", borderLeft: true, borderRight: false, borderStyle: "single", borderTop: false, paddingLeft: 1, children: _jsx(Text, { children: normalError.stack }) })] })), normalError.origin &&
                    normalError.origin instanceof BudError &&
                    normalError.stack && (_jsxs(Box, { flexDirection: "column", marginTop: 1, children: [_jsxs(Text, { color: "blue", children: [figures.home, ` `, "Originating error", ` `] }), _jsxs(Box, { borderBottom: false, borderColor: "red", borderLeft: true, borderRight: false, borderStyle: "single", borderTop: false, flexDirection: "column", paddingLeft: 1, children: [_jsxs(Text, { children: [normalError.origin.message, `\n`] }), normalError.origin.stack && (_jsx(Text, { children: normalError.origin.stack }))] })] }))] }, key)) }));
};
