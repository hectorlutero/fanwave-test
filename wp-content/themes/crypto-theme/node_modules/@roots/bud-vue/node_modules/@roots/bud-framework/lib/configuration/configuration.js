import { __decorate } from "tslib";
import { bind } from '@roots/bud-support/decorators/bind';
import { BudError } from '@roots/bud-support/errors';
import get from '@roots/bud-support/lodash/get';
import isArray from '@roots/bud-support/lodash/isArray';
import isFunction from '@roots/bud-support/lodash/isFunction';
import isObject from '@roots/bud-support/lodash/isObject';
import isString from '@roots/bud-support/lodash/isString';
/**
 * User config parser
 */
class Configuration {
    bud;
    /**
     * Class constructor
     */
    constructor(bud) {
        this.bud = bud;
    }
    /**
     * Process dynamic configuration
     */
    async dynamicConfig(config) {
        try {
            return await config(this.bud);
        }
        catch (cause) {
            throw cause;
        }
    }
    async handleConfigEntry(obj, [key, value]) {
        if (!(key in obj))
            return;
        const request = obj[key];
        const normalValue = isArray(value) ? value : [value];
        const parsedValue = normalValue.map(v => {
            if (isString(v) &&
                (v.startsWith(`_app.`) || v.startsWith(`_bud.`))) {
                return get(this.bud, v.replace(`_app.`, ``).replace(`_bud.`, ``).trim());
            }
            if (isString(v) &&
                (v.startsWith(`bud =>`) || v.startsWith(`app =>`))) {
                return eval(v.trim())(this.bud);
            }
            if (isString(v) && v.startsWith(`=>`)) {
                return eval(v.slice(3));
            }
            return v;
        });
        if (isFunction(request))
            await Promise.resolve(request(...parsedValue));
        if (isObject(request))
            await Promise.all(Object.entries(parsedValue).map(async ([key, value]) => {
                return await Promise.resolve(this.handleConfigEntry(request, [key, value]));
            }));
    }
    /**
     * Process configuration
     */
    async run(file) {
        if (!file?.module) {
            throw new BudError(`No module found`, {
                details: `There should be a module here. This is like an error with bud.js`,
                file,
            });
        }
        const config = await file.module();
        isFunction(config)
            ? await this.dynamicConfig(config)
            : await this.staticConfig(config);
    }
    /**
     * Process static configuration
     */
    async staticConfig(config) {
        return await Promise.all(Object.entries(config).map(async ([key, value]) => {
            await this.handleConfigEntry(this.bud, [key, value]);
        }));
    }
}
__decorate([
    bind
], Configuration.prototype, "dynamicConfig", null);
__decorate([
    bind
], Configuration.prototype, "handleConfigEntry", null);
__decorate([
    bind
], Configuration.prototype, "run", null);
__decorate([
    bind
], Configuration.prototype, "staticConfig", null);
export default Configuration;
