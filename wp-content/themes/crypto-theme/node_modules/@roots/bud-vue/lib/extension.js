import { __decorate } from "tslib";
import { join } from 'node:path';
import { Extension } from '@roots/bud-framework/extension';
import { bind, expose, label, options, } from '@roots/bud-framework/extension/decorators';
import { deprecated } from '@roots/bud-support/decorators';
import parseSemver from '@roots/bud-support/parse-semver';
/**
 * Vue configuration
 */
let Vue = class Vue extends Extension {
    /**
     * {@link Extension.buildBefore}
     */
    async buildBefore(bud) {
        bud.build.rules.css?.setUse((items = []) => [`vue-style`, ...items]);
        bud.build.rules.sass?.setUse((items = []) => [`vue-style`, ...items]);
        bud.build.items.precss?.setOptions({ esModule: false });
        const { VueLoaderPlugin } = await import(`vue-loader`);
        bud.webpackConfig(config => {
            config.module.rules = [
                {
                    include: [bud.path(`@src`)],
                    test: bud.hooks.filter(`pattern.vue`),
                    use: [bud.build.items.vue.toWebpack()],
                },
                ...config.module.rules.flatMap(rule => typeof rule === `object` && `oneOf` in rule ? rule.oneOf : rule),
            ];
            config.plugins.push(new VueLoaderPlugin());
            return config;
        });
    }
    /**
     * {@link Extension.configAfter}
     */
    async configAfter(bud) {
        bud.alias(this.resolveAlias);
        bud.typescript?.setAppendTsSuffixTo([bud.hooks.filter(`pattern.vue`)]);
    }
    /**
     * Returns true if user has installed a 2.x.x version of vue
     */
    isVue2() {
        if (!this.version) {
            const version = this.app.context.manifest?.dependencies?.vue ??
                this.app.context.manifest?.devDependencies?.vue;
            if (version)
                this.version = parseSemver(`vue@${version}`).version;
        }
        return !this.version ? false : this.version?.startsWith(`2`);
    }
    /**
     * {@link Extension.register}
     */
    async register({ build, hooks }) {
        const loader = await this.resolve(`vue-loader`, import.meta.url);
        if (!loader)
            return this.logger.error(`vue-loader not found`);
        const style = await this.resolve(`vue-style-loader`, import.meta.url);
        if (!style)
            return this.logger.error(`vue-style-loader not found`);
        hooks.on(`build.resolveLoader.alias`, (aliases = {}) => ({
            ...aliases,
            [`vue-loader`]: loader,
            [`vue-style-loader`]: style,
        }));
        build
            .setLoader(`vue`, await this.resolve(`vue-loader`, import.meta.url))
            .setLoader(`vue-style`, await this.resolve(`vue-style-loader`, import.meta.url))
            .setItem(`vue`, { ident: `vue`, loader: `vue` })
            .setItem(`vue-style`, { ident: `vue-style`, loader: `vue-style` });
        hooks.on(`build.resolve.extensions`, (extensions = new Set()) => extensions.add(`.vue`));
    }
    /**
     * `build.resolve.alias` callback
     */
    async resolveAlias(aliases = {}) {
        const type = this.isVue2() ? `esm` : `esm-bundler`;
        const importPath = this.options.runtimeOnly && !this.isVue2()
            ? join(`vue`, `dist`, `vue.runtime.${type}.js`)
            : join(`vue`, `dist`, `vue.${type}.js`);
        aliases[`vue`] = await this.resolve(importPath, import.meta.url);
        return aliases;
    }
    /**
     * Set `runtimeOnly` option
     *
     * @deprecated Use {@link Extension.set} instead
     * @example
     * ```js
     * bud.vue.set('runtimeOnly', false)
     * ```
     */
    runtimeOnly(enabled = true) {
        this.set(`runtimeOnly`, enabled);
        return this;
    }
};
__decorate([
    bind
], Vue.prototype, "buildBefore", null);
__decorate([
    bind
], Vue.prototype, "configAfter", null);
__decorate([
    bind
], Vue.prototype, "isVue2", null);
__decorate([
    bind
], Vue.prototype, "register", null);
__decorate([
    bind
], Vue.prototype, "resolveAlias", null);
__decorate([
    bind,
    deprecated(`bud.vue`, `Use bud.vue.set instead`, [
        [`Enable runtimeOnly`, `bud.vue.set('runtimeOnly', true)`],
        [`Disable runtimeOnly`, `bud.vue.set('runtimeOnly', false)`],
    ])
], Vue.prototype, "runtimeOnly", null);
Vue = __decorate([
    label(`@roots/bud-vue`),
    options({ runtimeOnly: true }),
    expose(`vue`)
], Vue);
export default Vue;
