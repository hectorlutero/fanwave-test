import type { Bud } from '@roots/bud-framework';
import type { WebpackPluginInstance } from '@roots/bud-framework/config';
import { Extension } from '@roots/bud-framework/extension';
interface Options {
    runtimeOnly: boolean;
}
/**
 * Vue configuration
 */
export default class Vue extends Extension<Options, WebpackPluginInstance> {
    getRuntimeOnly: () => boolean;
    setRuntimeOnly: (enabled: boolean) => this;
    /**
     * Resolved version
     */
    version: string;
    /**
     * {@link Extension.buildBefore}
     */
    buildBefore(bud: Bud): Promise<void>;
    /**
     * {@link Extension.configAfter}
     */
    configAfter(bud: Bud): Promise<void>;
    /**
     * Returns true if user has installed a 2.x.x version of vue
     */
    isVue2(): boolean;
    /**
     * {@link Extension.register}
     */
    register({ build, hooks }: Bud): Promise<any>;
    /**
     * `build.resolve.alias` callback
     */
    resolveAlias(aliases?: {}): Promise<Record<string, Array<string> | string>>;
    /**
     * Set `runtimeOnly` option
     *
     * @deprecated Use {@link Extension.set} instead
     * @example
     * ```js
     * bud.vue.set('runtimeOnly', false)
     * ```
     */
    runtimeOnly(enabled?: Options[`runtimeOnly`]): this;
}
export {};
