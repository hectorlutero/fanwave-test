import { createHash } from 'node:crypto';
import { join } from 'node:path';
import { BudError } from '@roots/bud-support/errors';
import args from '@roots/bud-support/utilities/args';
import * as envBootstrap from '@roots/bud-support/utilities/env';
import envPaths from 'env-paths';
const systemPaths = envPaths(`bud`);
/**
 * Cache paths
 */
let paths;
const get = (directory) => {
    if (paths)
        return paths;
    if (!directory)
        throw new BudError(`directory is required if paths not already initialized`, {
            details: `\
This error is thrown when the paths utility is called without a directory argument and the paths have not already been initialized.
This is most likely a problem with the internals of bud.js.`,
            issue: new URL(`https://github.com/roots/bud/search?q=paths+error+is:issue`),
        });
    let basedir = directory;
    let sha1 = createHash(`sha1`).update(directory);
    let hash;
    let env = envBootstrap.get(directory);
    if (args.cwd || args.basedir || env.APP_BASE_PATH) {
        basedir = join(directory, args.cwd ?? args.basedir ?? env.APP_BASE_PATH);
        sha1.update(basedir);
        env = envBootstrap.get(basedir);
    }
    hash = sha1.digest(`base64url`);
    let storage = join(systemPaths.cache, hash);
    if (args.storage || args[`@storage`] || env.APP_STORAGE_PATH) {
        storage = join(basedir, args.storage ?? args[`@storage`] ?? env.APP_STORAGE_PATH);
    }
    paths = {
        ...Object.entries(systemPaths).reduce((acc, [key, value]) => {
            return { ...acc, [`os-${key}`]: join(value, hash) };
        }, { basedir, hash, storage }),
    };
    return paths;
};
export { get, paths };
