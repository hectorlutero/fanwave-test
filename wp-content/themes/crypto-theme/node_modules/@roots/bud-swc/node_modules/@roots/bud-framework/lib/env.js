import { __decorate } from "tslib";
import { ServiceContainer } from '@roots/bud-framework/service';
import { bind } from '@roots/bud-support/decorators/bind';
/**
 * Env service
 */
export default class Env extends ServiceContainer {
    /**
     * Bootstrap event callback
     */
    async bootstrap(bud) {
        this.setStore(bud.context.env);
    }
    /**
     * Filter public env
     */
    filterPublicEnv([key]) {
        return key.startsWith(`PUBLIC_`);
    }
    /**
     * Get entries from .env which include `APP_PUBLIC` in their name
     *
     * @public
     * @decorator `@bind`
     */
    getPublicEnv() {
        return this.getEntries()
            .filter(this.filterPublicEnv)
            .map(this.transformPublicEnv)
            .reduce((a, [k, v]) => ({ ...a, [k]: v }), {});
    }
    /**
     * Transform public env
     */
    transformPublicEnv([rawKey, rawValue]) {
        return [rawKey.replace(`PUBLIC_`, ``), rawValue];
    }
}
__decorate([
    bind
], Env.prototype, "bootstrap", null);
__decorate([
    bind
], Env.prototype, "filterPublicEnv", null);
__decorate([
    bind
], Env.prototype, "getPublicEnv", null);
__decorate([
    bind
], Env.prototype, "transformPublicEnv", null);
