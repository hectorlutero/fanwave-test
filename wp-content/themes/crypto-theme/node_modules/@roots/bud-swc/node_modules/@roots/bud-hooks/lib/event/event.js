import { __decorate } from "tslib";
import { bind } from '@roots/bud-support/decorators/bind';
import { Hooks } from '../base/base.js';
/**
 * Synchronous hooks registry
 *
 * @remarks
 * Supports sync values
 */
export class EventHooks extends Hooks {
    async get(id, ...value) {
        if (!(id in this.store) || !this.store[id].length)
            return this.app;
        this.app.hooks.logger.time(id);
        this.app.dashboard?.updateStatus(id);
        await Promise.all(this.store[id].map(async (action) => {
            await action(...value).catch((error) => {
                throw error;
            });
        })).catch(error => {
            throw error;
        });
        return this.app;
    }
    set(id, ...input) {
        if (!(id in this.store))
            this.store[id] = [];
        input.map((value, iteration) => {
            this.app.hooks.logger.info(`registered ${id} callback`, `(${iteration + 1}/${input.length})`);
            this.store[id].push(value);
        });
        return this.app;
    }
}
__decorate([
    bind
], EventHooks.prototype, "get", null);
__decorate([
    bind
], EventHooks.prototype, "set", null);
