import cleanStack from 'clean-stack';
/**
 * Error base class
 */
class BudError extends Error {
    static normalize(error) {
        if (error instanceof BudError)
            return error;
        if (error instanceof Error) {
            const { message, ...rest } = error;
            return new BudError(message, rest);
        }
        if (typeof error === `string`) {
            return new BudError(error);
        }
        return new BudError(`unknown error`);
    }
    /**
     * Used to identify Bud errors
     */
    isBudError = true;
    /**
     * Error display name
     */
    name = `BudError`;
    /**
     * Class constructor
     */
    constructor(message, options = {}) {
        super(message);
        Object.assign(this, options);
        if (!this.instance)
            this.instance = `default`;
        if (this.stack) {
            this.stack = cleanStack(this.stack, {
                pathFilter: path => !path.includes(`react-reconciler`) &&
                    !path.includes(`bud-support/lib/errors`),
            });
        }
        if (this.message) {
            this.message = cleanStack(this.message, {
                pathFilter: path => !path.includes(`react-reconciler`) &&
                    !path.includes(`bud-support/lib/errors`),
            });
        }
        if (this.thrownBy) {
            this.thrownBy = this.thrownBy.replace(process.cwd(), ``);
        }
        this.isBudError = true;
    }
}
/**
 * ModuleError
 */
class ModuleError extends BudError {
    name = `ModuleError`;
}
/**
 * ConfigError
 */
class ConfigError extends BudError {
    name = `ConfigurationError`;
}
/**
 * InputError
 */
class InputError extends BudError {
    name = `InputError`;
}
/**
 * CompilerError
 */
class CompilerError extends BudError {
    name = `CompilerError`;
}
/**
 * ServerError
 */
class ServerError extends BudError {
    name = `ServerError`;
}
/**
 * ExtensionError
 */
class ExtensionError extends BudError {
    name = `ExtensionError`;
}
export { BudError, CompilerError, ConfigError, ExtensionError, InputError, ModuleError, ServerError, };
