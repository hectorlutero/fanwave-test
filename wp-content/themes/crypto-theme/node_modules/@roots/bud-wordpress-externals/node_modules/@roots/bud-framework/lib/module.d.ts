import { type Bud } from './index.js';
import { Service } from './service.js';
/**
 * Module resolver
 */
export declare class Module extends Service {
    /**
     * Resolved module cache
     */
    resolved: Record<string, string>;
    /**
     * At end of process write resolutions to cache
     */
    after(): Promise<void>;
    /**
     * {@link Service.bootstrap}
     */
    bootstrap(bud: Bud): Promise<void>;
    /**
     * Cache enabled
     */
    get cacheEnabled(): boolean;
    /**
     * {@link Service.compilerBefore}
     */
    compilerBefore(bud: Bud): Promise<void>;
    /**
     * Get `package.json` absolute path from a module signifier
     */
    getDirectory(signifier: string, context?: string): Promise<string>;
    /**
     * Get `package.json` absolute path from a module signifier
     */
    getManifestPath(pkgName: string): Promise<string>;
    /**
     * Import a module from its signifier
     */
    import<T extends string>(signifier: T, context?: string, options?: {
        bustCache?: boolean;
        raw?: boolean;
    }): Promise<any>;
    /**
     * Make context URL
     */
    makeContextURL(context?: string): string;
    /**
     * Read `package.json` manifest from a module signifier
     */
    readManifest(signifier: string): Promise<any>;
    /**
     * Cache location
     */
    get resolutionsPath(): string;
    /**
     * Resolve a module path from its signifier
     */
    resolve(signifier: string, context?: string): Promise<string>;
}
