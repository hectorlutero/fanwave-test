import { __decorate } from "tslib";
import methods from '@roots/bud-framework/methods';
import { bind } from '@roots/bud-support/decorators/bind';
import { BudError, InputError } from '@roots/bud-support/errors';
import isFunction from '@roots/bud-support/lodash/isFunction';
import isString from '@roots/bud-support/lodash/isString';
import isUndefined from '@roots/bud-support/lodash/isUndefined';
import logger from '@roots/bud-support/logger';
import { bootstrap } from './bootstrap.js';
/**
 * Bud core class
 */
export class Bud {
    promised = Promise.resolve();
    /**
     * Boot application services
     */
    async boot() {
        await this.executeServiceCallbacks(`boot`);
    }
    /**
     * Bootstrap the application
     */
    async bootstrap() {
        await this.executeServiceCallbacks(`bootstrap`);
    }
    catch(error) {
        if (error instanceof BudError) {
            error.instance = this.label;
            throw error;
        }
        const normalizedError = BudError.normalize(error);
        normalizedError.instance = this.label;
        throw normalizedError;
    }
    /**
     * Log error
     * @deprecated Import logger instance from `@roots/bud-support/logger`
     */
    error(...messages) {
        logger.scope(this.label).error(...messages);
        return this;
    }
    /**
     * Execute service callbacks for a given stage
     * @internal
     */
    async executeServiceCallbacks(stage) {
        return await this.promise(async () => this.hooks.fire(stage, this)).catch(this.catch);
    }
    /**
     * True when child compilers
     * @readonly
     */
    get hasChildren() {
        return this.children && Object.entries(this.children).length > 0;
    }
    /**
     * Log info
     * @deprecated Import logger instance from `@roots/bud-support/logger`
     */
    info(...messages) {
        logger.scope(this.label).info(...messages);
        return this;
    }
    /**
     * Bud initialize
     */
    async initialize(context) {
        logger.time(`initialize`);
        Object.entries(methods).forEach(([key, value]) => {
            this[key] = value.bind(this);
        });
        this.set(`services`, [])
            .set(`promised`, Promise.resolve())
            .set(`context`, { ...context });
        await bootstrap(this).catch(this.catch);
        return this;
    }
    /**
     * True when current instance is a child instance
     * @readonly
     */
    get isChild() {
        return this.root?.context?.label !== this.context?.label;
    }
    /**
     * True when {@link Bud.mode} is `development`
     * @readonly
     */
    get isDevelopment() {
        return this.mode === `development`;
    }
    /**
     * True when {@link Bud.mode} is `production`
     * @readonly
     */
    get isProduction() {
        return this.mode === `production`;
    }
    /**
     * True when current instance is the parent instance
     * @readonly
     */
    get isRoot() {
        return this.root?.context?.label === this.context?.label;
    }
    /**
     * Label
     * @readonly
     */
    get label() {
        return this.context?.label ?? `bud`;
    }
    /**
     * Log message
     * @deprecated Import logger instance from `@roots/bud-support/logger`
     */
    log(...messages) {
        logger.scope(this.label).log(...messages);
        return this;
    }
    /**
     * Creates a child and returns the parent instance
     */
    async make(request, setupFn) {
        if (!this.isRoot) {
            return this.catch(new InputError(`bud.make: must be called from the root context`));
        }
        const context = isString(request)
            ? { ...this.context, label: request, root: this }
            : { ...this.context, ...request, root: this };
        if (isUndefined(context.label)) {
            return this.catch(new InputError(`bud.make: context.label must be a string`));
        }
        if (!isUndefined(this.context.filter) &&
            !this.context.filter.includes(context.label)) {
            logger.log(`skipping child instance based on --filter flag:`, context.label);
            return this;
        }
        if (!this.children)
            this.children = {};
        if (this.children[context.label]) {
            return this.catch(new InputError(`bud.make: child instance ${context.label} already exists`));
        }
        logger.log(`instantiating ${context.label}`);
        this.children[context.label] =
            await new this.implementation().initialize({
                ...context,
            });
        if (setupFn)
            await setupFn(this.children[context.label]);
        await this.children[context.label].promise();
        this.get(context.label)?.hooks.on(`build.dependencies`, typeof request !== `string` && request.dependsOn
            ? request.dependsOn
            : Object.values(this.children)
                .map(({ label }) => label)
                .filter(label => label !== context.label));
        return this;
    }
    /**
     * Compilation mode
     *
     * @remarks
     * Either `production` or `development`.
     *
     * @readonly
     * @defaultValue `production`
     */
    get mode() {
        return this.context.mode ?? `production`;
    }
    /**
     * Await all promised tasks
     */
    async promise(promise) {
        if (promise)
            await this.promised
                .then(async () => await promise(this))
                .catch(this.catch);
        else
            await this.promised.catch(this.catch);
        return this;
    }
    /**
     * Register application services
     */
    async register() {
        await this.executeServiceCallbacks(`register`);
    }
    /**
     * Parent {@link Bud} instance
     * @readonly
     */
    get root() {
        return this.context?.root ?? this;
    }
    /**
     * Set a value on the current instance
     * @param key - key
     * @param value - value
     * @param bind - bind value to current instance (default: true, if bindable)
     */
    set(key, value, bind = true) {
        if (bind && isFunction(value) && `bind` in value) {
            Object.assign(this, { [key]: value.bind(this) });
            return this;
        }
        Object.assign(this, { [key]: value });
        return this;
    }
    /**
     * Log success
     * @deprecated Import logger instance from `@roots/bud-support/logger`
     */
    success(...messages) {
        logger.scope(this.label).success(...messages);
        return this;
    }
    /**
     * Log warning
     * @deprecated Import logger instance from `@roots/bud-support/logger`
     */
    warn(...messages) {
        logger.scope(this.label).warn(...messages);
        return this;
    }
}
__decorate([
    bind
], Bud.prototype, "boot", null);
__decorate([
    bind
], Bud.prototype, "bootstrap", null);
__decorate([
    bind
], Bud.prototype, "catch", null);
__decorate([
    bind
], Bud.prototype, "error", null);
__decorate([
    bind
], Bud.prototype, "executeServiceCallbacks", null);
__decorate([
    bind
], Bud.prototype, "info", null);
__decorate([
    bind
], Bud.prototype, "initialize", null);
__decorate([
    bind
], Bud.prototype, "log", null);
__decorate([
    bind
], Bud.prototype, "make", null);
__decorate([
    bind
], Bud.prototype, "promise", null);
__decorate([
    bind
], Bud.prototype, "register", null);
__decorate([
    bind
], Bud.prototype, "set", null);
__decorate([
    bind
], Bud.prototype, "success", null);
__decorate([
    bind
], Bud.prototype, "warn", null);
