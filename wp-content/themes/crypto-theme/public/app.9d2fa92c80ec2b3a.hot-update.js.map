{"version":3,"file":"app.9d2fa92c80ec2b3a.hot-update.js","mappings":";;;;;;;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwCA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@roots/bud/sage/sage/./scripts/components/CryptoTable.vue"],"sourcesContent":["\n/**\n * THE SCRIPT PART HANDLES THE  TEMPLATE PARTS IN TWO STATES, ON MOUNT AND ON INTERACTIONS:\n *  - To understand it better, we need to understand the data flow when mounted and available interactions.\n *  - On Mount:\n *    - loadCoins: This method makes a API call to retrieve crypto data and renders the table rows.\n *        - it takes the top 10 currencies in market (limited to 10)\n *        - With the response.data it updates the array variable 'coins'\n *        - when coins array variable is updated it rerenders the Component CryptoItem that receives it.\n *          Rendering the Table's rows.\n *\n *  - When Interacting:\n *    - changeCurrency: everytime the currency is changed, it updates the variable selectedCurrency,\n *      and makes the api call again thorugh loadCoins method.\n *\n *    - Table Row Selection: everytime a coin is selected opens up a modal, with informations about that\n *      specific currency.\n *        - Get the selected coin through click. However, you won't see this happening on this component,\n *          because, the rows are rendered in a children Component called CryptoItem.\n *        - In CryptoItems we 'emit' the selected coin value and if the modal is active to it's parent\n *          component, CrytoTable, update the selectedCoin variable state and show its data rendering the\n *          CryptoModal, using toggleModal(),\n *\n *\n *    - Search functionality:\n *      - I have decided to limit the search functionality to only the ten crypto displayed, instead of calling\n *        the API again. Saving API consumption and making the search more efficient using the data already\n *        fetched.\n *      - everytime the user types enter on searchbox or clicks the button search, it triggers searchCrypto(),\n *        instead of when key down or key up, in order to save API calls unnecessarily.\n *      - searchCrypto: It basically filters the coins array comparing with the user input, when nothing is found\n *        renders the ten top Crypto Coins.\n *\n *    - Sort Functionality:\n *      - It's triggered when the user clicks some of the table header cells, calling sortTable()\n *      - sortTable(): will check for which key on table header cell was selected, using sort() javascript\n *        functionality, it going to evaluate the type of data for each each cell row, if it's a string or not.\n *          * String type value: it orders alphabetically using, localeCompare() and sortOrder variable, 1 for\n *          ascending, and -1 for descending\n *          * Number type value: it orders by size, using straight forward, valueA - valueB, thorugh sortOrder too.\n *\n */\nimport axios from 'axios';\nimport CryptoItem from './CryptoItem.vue';\nimport CryptoModal from './CryptoModal.vue';\n\nexport default {\n  data: function () {\n    return {\n      coins: [],\n      selectedCurrency: 'eur',\n      userInput: '',\n      sortKey: null,\n      sortOrder: 1,\n      selectedCoin: null,\n      modalActive: false,\n    };\n  },\n  mounted() {\n    setTimeout(() => {\n      this.loadCoins();\n    }, 1500);\n  },\n  methods: {\n    loadCoins: function () {\n      axios\n        .get(this.getApiUrl())\n        .then((response) => {\n          this.coins = response.data;\n        })\n        .catch((error) => {\n          console.log(error);\n        });\n    },\n    changeCurrency: function (currency) {\n      this.selectedCurrency = currency;\n      this.coins = [];\n      setTimeout(() => {\n        this.loadCoins();\n      }, 1500);\n    },\n    getApiUrl: function () {\n      return `https://api.coingecko.com/api/v3/coins/markets?vs_currency=${this.selectedCurrency}&order=market_cap_desc&per_page=10&page=1&sparkline=false&locale=en&x_cg_demo_api_key=CG-Dja2R2rhxMMJ9bYxERe3D27n`;\n    },\n    getSelectedCoin(value) {\n      this.selectedCoin = value;\n    },\n    toggleModal() {\n      this.modalActive = !this.modalActive;\n    },\n    isModalActive() {\n      this.toggleModal();\n    },\n    searchCrypto: function () {\n      const filteredCoins = this.coins.filter((coin) => {\n        const lowerCaseInput = this.userInput.toLowerCase();\n        return (\n          coin.name.toLowerCase().includes(lowerCaseInput) ||\n          coin.symbol.toLowerCase().includes(lowerCaseInput)\n        );\n      });\n      if (this.userInput && filteredCoins.length > 0) {\n        return (this.coins = filteredCoins);\n      } else {\n        return this.loadCoins();\n      }\n    },\n    sortTable: function (key) {\n      if (this.sortKey === key) {\n        this.sortOrder *= -1;\n      } else {\n        this.sortKey = key;\n        this.sortOrder = 1;\n      }\n      this.coins.sort((a, b) => {\n        const aValue = a[key];\n        const bValue = b[key];\n\n        return (\n          (typeof aValue === 'string'\n            ? aValue.localeCompare(bValue)\n            : aValue - bValue) * this.sortOrder\n        );\n      });\n    },\n  },\n  components: {\n    CryptoItem,\n    CryptoModal,\n  },\n};\n"],"names":[],"sourceRoot":""}